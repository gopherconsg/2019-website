# Talks are displayed in alphanumerical order

header = "Conference"
subtitle = "*Schedule is currently not in order, and is subject to change.*"
date = "Friday, 3rd May"
type = "Talks"

[talks]
[talks.01]
title = "$GOPHERCONSG/doors/open"
class = "timeline-mono-header"
timerange = "8.30am"
talk = "Registration"

[talks.10]
title = "Clear is better than clever"
class = "timeline-sub-header"
# timerange = "9.10am"
profile = "dave-cheney.jpg"
name = "Dave Cheney"
fragmentid = "dave-cheney"
talk = """Well socialised Gophers often cite readability as one of Goâ€™s core tenets, I disagree.

In this talk Iâ€™ll discuss the differences between readability and clarity, show how to write clear Go code, and argue that Go programmers should strive for clarity, not just readability, in their programs."""

[talks.15]
title = "Garbage Collection Sematics"
class = "timeline-sub-header"
profile = "bill-kennedy.jpg"
name = "Bill Kennedy"
fragmentid = "bill-kennedy"
talk = """Garbage collectors have the responsibility of tracking allocations on the heap, freeing up allocations that are no longer needed, and keeping allocations that are still in-use.

How a language decides to implement this behavior is complicated and it shouldnâ€™t be important for application developers to understand. Plus, with different releases of a languageâ€™s VM or runtime, the implementation of these systems are always changing and evolving. Whatâ€™s important for application developers is to maintain a good working model of how the garbage collector for their language behaves and how they can be sympathetic with that behavior without being concerned as to the implementation.

In this talk, I will explain how to be sympathetic with the Go garbage collector, regardless of the current implementation or how it changes in the future. This will make you a better Go developer."""

[talks.20]
title = "Go, pls stop breaking my editor"
class = "timeline-sub-header"
profile = "rebecca-stambler.jpg"
name = "Rebecca Stambler"
fragmentid = "rebecca-stambler"
talk = """This talk will cover the motivation behind, implementation of, and future plans for gopls, the Go implementation of the Language Server Protocol. This tool is currently being developed by the Go team and Go tools community, and it will ultimately serve as the backend for any LSP-compatible editor."""

[talks.21]
title = "Using and Writing Go Analyses"
class = "timeline-sub-header"
profile = "michael-matloob.jpg"
name = "Michael Matloob"
fragmentid = "michael-matloob"
talk = """The Analysis API is used to write analyses (like those in go vet and go lint) that can help surface bugs and show code improvements to users. Iâ€™ll show how to use and write analyses, and see their results, so you can help improve your code quality."""

[talks.30]
title = "High(er) Reliability Software Patterns for Go"
class = "timeline-sub-header"
profile = "junade-ali.jpg"
name = "Junade Ali"
fragmentid = "junade-ali"
talk = """Software reliability is often neglected, but is increasingly important. This talk discusses why certain high-reliability software engineering practices exist and how they can be implemented in Go. This talk features real world software failures and describes how such instances can be prevented."""

[talks.40]
title = "Going Secure with Go"
class = "timeline-sub-header"
profile = "natalie-pistunovich.jpg"
name = "Natalie Pistunovich"
fragmentid = "natalie-pistunovich"
talk = """Natalie will discuss a broad range of aspects of Go application security by taking on writing secure code, dependency management and Docker images and containers security."""

[talks.50]
title = "Optimizing Go code without a blindfold"
class = "timeline-sub-header"
profile = "daniel-marti.jpg"
name = "Daniel MartÃ­"
fragmentid = "daniel-marti"
talk = """Making code faster is exciting, and benchmarks in Go make that easy to do!

Not really. Optimizing a program can be complex and require careful consideration to do properly. This talk will demonstrate techniques and tools which are a must for any performance aficionado."""

[talks.60]
title = "Deep learning in Go - Present and future"
class = "timeline-sub-header"
profile = "karthic-rao.jpg"
name = "Karthic Rao"
fragmentid = "karthic-rao"
talk = """After hypnotizing the large scale cloud software community with its capabilities, Go now starts to stare at the exciting area of deep learning. Deep learning in Go?!! But why? And how? Whatâ€™s next? Curious? Letâ€™s explore it with a fun-filled, fast-paced deep dive into deep learning in Go."""

[talks.65]
title = "Understanding Allocations: the Stack and the Heap"
class = "timeline-sub-header"
profile = "jacob-walker.jpg"
name = "Jacob Walker"
fragmentid = "jacob-walker"
talk = """Like C, Go uses both stack and heap memory. How can a Gopher know which is being used? Can you influence this decision? What effect does it have on your program? Are there any tools to help? This talk answers those questions and more."""

[talks.68]
title = "GOing to Sydney"
class = "timeline-sub-header"
profile = "katie-fry.jpg"
name = "Katie Fry"
fragmentid = "katie-fry"
talk = """In this talk I will: help to raise awareness of what employers typically look for when hiring for Go developers; pin point the red flags; talk about Sydneyâ€™s Go Community."""

[talks.70]
title = "Controlling Distributed Energy Resources with Edge Computing and Go"
class = "timeline-sub-header"
talk = """With advancing technologies, energy distribution model has changed from being centralised to being distributed. We created a platform for distributing and running IoT apps, written in Go, on edge devices to monitor and control distributed energy resources such as photovoltaic and battery systems."""
    fragmentid = "sp-digital"
[talks.70.speakers]
    [talks.70.speakers.01]
    profile = "sausheong-chang.jpg"
    name = "Sau Sheong Chang"
    fragmentid = "sausheong-chang"
    [talks.70.speakers.02]
    profile = "adrianrully-santosa.jpg"
    name = "Adrian Rully Santosa"
    fragmentid = "adrian-rully-santosa"

[talks.71]
title = "Writing Microservice Integration Tests in Go (Finally)"
class = "timeline-sub-header"
profile = "michael-farinacci.jpg"
name = "Michael Farinacci"
fragmentid = "michael-farinacci"
talk = """Integration testing microservices is an extremely difficult task when systems are large, but it doesnâ€™t have to be that way. Golangâ€™s native concurrency enables developers to easily run and communicate with mocked versions of downstream dependencies within their integration test code."""

[talks.80]
title = "Data Journey with Golang, GraphQL and Microservices"
class = "timeline-sub-header"
profile = "imre-nagi.jpg"
name = "Imre Nagi"
fragmentid = "imre-nagi"
talk = """A unique experience from one of the big online travel agents in SEA, Traveloka, in migrating the internal data platform from a monolith Java app into microservices app in Golang & GraphQL. I will also discuss how we use Kubernetes & Istio to efficiently deploy, monitor and scale this system."""

[talks.85]
title = "Engineering Luck: Essential and Accidental Complexity at GOJEK"
class = "timeline-sub-header"
profile = "sidu-ponnappa.jpg"
name = "Sidu Ponnappa"
fragmentid = "sidu-ponnappa"
talk = """The talk covers what is to me the most nuanced and difficult to apply concept in software engineering â€” distinguishing between essential and accidental complexity, and learning to mitigate the latter, while solving for the former."""

[talks.90goodbye]
title = "GOODBYE"
class = "timeline-mono-header"
timerange = "6.30pm"

[talks.99afterparty]
title = "$GOPHERCONSG/after/party/ðŸŽ‰"
class = "timeline-mono-header"
timerange = "7.00pm to 11.59pm"
